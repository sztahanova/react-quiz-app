{"version":3,"sources":["utils.ts","components/LoadingComponent.tsx","components/NoDataComponent.tsx","components/question/QuestionStyles.ts","components/question/QuestionComponent.tsx","components/score/ScoreStyles.ts","components/score/ScoreComponent.tsx","components/quiz/QuizStyles.ts","components/quiz/QuizComponent.tsx","quizApi.ts","store/actionTypes.ts","components/form/FormControlStyle.ts","components/form/CategorySelectorComponent.tsx","store/actionCreators.ts","components/form/DifficultySelectorComponent.tsx","components/form/QuestionNumberSelectorComponent.tsx","components/form/QuizFormComponent.tsx","App.tsx","theme.ts","store/reducer.ts","index.tsx"],"names":["shuffle","values","j","x","i","length","Math","floor","random","Loading","className","NoData","useQuestionStyles","makeStyles","theme","question","gap","minWidth","questionCount","color","display","questionNumber","fontSize","answerContainer","margin","width","flexDirection","justifyContent","answer","padding","textAlign","borderWidth","cursor","correctAnswer","backgroundColor","palette","correct","main","incorrectAnswer","incorrect","Question","props","styles","useState","selectedAnswer","setSelectedAnswer","applyCustomClass","setApplyCustomClass","disableButtons","setDisableButtons","getCustomClassName","Grid","container","item","sm","Typography","variant","gutterBottom","currentQuestion","nrOfQuestions","decodeURIComponent","questionText","answers","map","Button","onClick","setTimeout","handleAnswerButtonClick","undefined","useScoreStyles","score","alignItems","button","Score","history","useHistory","push","useQuizStyles","quiz","secondary","minHeight","borderRadius","boxShadow","Quiz","selectedCategoryID","useSelector","state","categoryID","selectedDifficulty","difficulty","questionNUmber","setCurrentQuestion","showScore","setShowScore","setScore","questionList","setQuestionList","loading","setLoading","getQuestionList","useCallback","baseLink","categoryPart","difficultyPart","questionNumberPart","link","fetch","then","result","json","response_code","results","useEffect","isCorrect","nextQuestion","handleNewQuizButtonClick","Container","handleButtonClick","correct_answer","incorrect_answers","SET_CATEGORY_ID","SET_DIFFICULTY","SET_QUESTION_NUMBER","useFormControlStyle","formControl","quizForm","CategorySelector","dispatch","useDispatch","style","categoryList","setCategoryList","setSelectedCategoryID","action","type","payload","setCategoryID","getCategories","res","trivia_categories","FormControl","InputLabel","id","Select","labelId","label","disabled","value","onChange","event","target","name","category","MenuItem","DifficultySelector","setSelectedDifficulty","setDifficulty","ValueLabelComponent","children","open","Tooltip","enterTouchDelay","placement","title","QuestionNumberSelector","setNumberOfQuestions","setQuestionNumber","maxQuestionCount","setMaxQuestionCount","getQuestionCount","count","overall","total_num_of_verified_questions","min","category_question_count","total_easy_question_count","total_medium_question_count","total_hard_question_count","total_question_count","Slider","aria-labelledby","defaultValue","max","onChangeCommitted","QuizForm","quizStyles","formStyles","marginTop","App","exact","path","component","to","primary","white","createMuiTheme","background","default","contrastText","text","overrides","MuiButton","root","MuiFormLabel","MuiOutlinedInput","input","borderColor","MuiMenu","list","MuiMenuItem","MuiSlider","thumb","track","initialState","reducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.47e60f58.chunk.js","sourcesContent":["export function shuffle<T>(values: T[]): T[] {\n  let j, x, i;\n\n  for (i = values.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = values[i];\n    values[i] = values[j];\n    values[j] = x;\n  }\n\n  return values;\n}\n","const Loading = () => {\n  return <div className=\"score-section\">Loading questions...</div>;\n};\n\nexport default Loading;\n","const NoData = () => {\n  return <div className=\"score-section\">Could not retrieve any questions.</div>;\n};\n\nexport default NoData;\n","import { makeStyles } from \"@material-ui/core\";\n\n// .timer-text {\n//   background: rgb(230, 153, 12);\n//   padding: 15px;\n//   margin-top: 20px;\n//   margin-right: 20px;\n//   border: 5px solid rgb(255, 189, 67);\n//   border-radius: 15px;\n//   text-align: center;\n// }\n\nconst useQuestionStyles = makeStyles((theme) => ({\n  question: {\n    gap: 10,\n    minWidth: 250,\n  },\n  questionCount: {\n    color: \"grey\",\n    display: \"inline-block\",\n  },\n  questionNumber: {\n    fontSize: 28,\n  },\n  answerContainer: {\n    gap: 10,\n    margin: \"auto\",\n    width: \"100%\",\n    minWidth: 250,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  answer: {\n    width: \"100%\",\n    fontSize: 16,\n    color: \"white\",\n    display: \"flex\",\n    padding: 5,\n    justifyContent: \"flex-start\",\n    textAlign: \"left\",\n    borderWidth: 5,\n    cursor: \"pointer\",\n\n    \"&:hover\": {\n      borderWidth: 5,\n    },\n  },\n  correctAnswer: {\n    backgroundColor: theme.palette.correct.main,\n\n    \"&:hover\": {\n      backgroundColor: theme.palette.correct.main,\n    },\n  },\n\n  incorrectAnswer: {\n    backgroundColor: theme.palette.incorrect.main,\n\n    \"&:hover\": {\n      backgroundColor: theme.palette.incorrect.main,\n    },\n  },\n}));\n\nexport default useQuestionStyles;\n","import { useState } from \"react\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport useQuestionStyles from \"./QuestionStyles\";\nimport { QuestionProps } from \"../../types/type\";\n\nconst Question = (props: QuestionProps) => {\n  const styles = useQuestionStyles();\n\n  const [selectedAnswer, setSelectedAnswer] = useState<string>();\n  const [applyCustomClass, setApplyCustomClass] = useState<boolean>(false);\n  const [disableButtons, setDisableButtons] = useState<boolean>(false);\n\n  const handleAnswerButtonClick = (answer: string) => {\n    if (!disableButtons) {\n      setDisableButtons(true);\n      setSelectedAnswer(answer);\n      setApplyCustomClass(true);\n\n      setTimeout(() => {\n        props.handleAnswerButtonClick(props.correctAnswer === answer);\n        setSelectedAnswer(undefined);\n        setApplyCustomClass(false);\n        setDisableButtons(false);\n      }, 1000);\n    }\n  };\n\n  const getCustomClassName = (answer: string) => {\n    if (applyCustomClass) {\n      switch (answer) {\n        case props.correctAnswer:\n          return styles.correctAnswer;\n        case selectedAnswer:\n          return styles.incorrectAnswer;\n        default:\n          return \"\";\n      }\n    }\n\n    return \"\";\n  };\n\n  return (\n    <Grid container>\n      <Grid item sm={5} className={styles.question}>\n        <Grid item>\n          <div>\n            <Typography variant=\"button\" gutterBottom className={`${styles.questionCount} ${styles.questionNumber}`}>\n              Question {props.currentQuestion + 1}\n            </Typography>\n            <Typography variant=\"h6\" gutterBottom className={styles.questionCount}>\n              /{props.nrOfQuestions}\n            </Typography>\n          </div>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n            {decodeURIComponent(props.questionText)}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid item sm={5} className={styles.answerContainer}>\n        {props.answers.map((answer) => {\n          return (\n            <Grid item key={answer}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={`${styles.answer} ${getCustomClassName(answer)}`}\n                onClick={() => handleAnswerButtonClick(answer)}\n              >\n                {decodeURIComponent(answer)}\n              </Button>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Grid>\n  );\n};\nexport default Question;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useScoreStyles = makeStyles({\n  score: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n  },\n  button: {\n    borderWidth: 3,\n\n    \"&:hover\": {\n      borderWidth: 3,\n    },\n  },\n});\n\nexport default useScoreStyles;\n","import { Button, Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { ScoreProps } from \"../../types/type\";\nimport useScoreStyles from \"./ScoreStyles\";\n\nconst Score = (props: ScoreProps) => {\n  const history = useHistory();\n  const styles = useScoreStyles();\n  const { score, nrOfQuestions } = props;\n\n  const handleClick = () => {\n    history.push(\"/react-quiz-app/\");\n  };\n\n  return (\n    <div className={styles.score}>\n      <Typography variant=\"button\" gutterBottom>\n        You scored\n      </Typography>\n      <Typography variant=\"h3\" color=\"primary\" gutterBottom>\n        {score}\n      </Typography>\n      <Typography variant=\"button\">out of</Typography>\n      <Typography variant=\"h3\" gutterBottom>\n        {nrOfQuestions}\n      </Typography>\n      <Button variant=\"outlined\" color=\"primary\" className={styles.button} onClick={handleClick}>\n        New quiz\n      </Button>\n    </div>\n  );\n};\n\nexport default Score;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useQuizStyles = makeStyles((theme) => ({\n  quiz: {\n    backgroundColor: theme.palette.secondary.main,\n    minWidth: 450,\n    minHeight: 250,\n    borderRadius: 15,\n    padding: 20,\n    boxShadow: \"10px 10px 42px 0px rgba(0, 0, 0, 0.75)\",\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n  },\n}));\n\nexport default useQuizStyles;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { shuffle } from \"../../utils\";\nimport Loading from \"../LoadingComponent\";\nimport NoData from \"../NoDataComponent\";\nimport Question from \"../question/QuestionComponent\";\nimport Score from \"../score/ScoreComponent\";\nimport useQuizStyles from \"./QuizStyles\";\nimport { QUIZ_API } from \"../../quizApi\";\nimport { useSelector } from \"react-redux\";\nimport { QuizApiResult, QuizFormState } from \"../../types/type\";\n\nconst Quiz = () => {\n  const styles = useQuizStyles();\n\n  const selectedCategoryID = useSelector((state: QuizFormState) => state.categoryID);\n  const selectedDifficulty = useSelector((state: QuizFormState) => state.difficulty);\n  const questionNumber = useSelector((state: QuizFormState) => state.questionNUmber);\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [questionList, setQuestionList] = useState<QuizApiResult[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getQuestionList = useCallback(() => {\n    setLoading(true);\n\n    const baseLink = `${QUIZ_API}?type=multiple&encode=url3986`;\n    const categoryPart = selectedCategoryID === 0 ? \"\" : `&category=${selectedCategoryID}`;\n    const difficultyPart = selectedDifficulty === \"all\" ? \"\" : `&difficulty=${selectedDifficulty}`;\n    const questionNumberPart = `&amount=${questionNumber}`;\n\n    const link = `${baseLink}${categoryPart}${difficultyPart}${questionNumberPart}`;\n\n    fetch(link)\n      .then((result) => result.json())\n      .then((result) => {\n        if (result.response_code === 0) {\n          setQuestionList(result.results);\n        }\n        setLoading(false);\n      });\n  }, [selectedCategoryID, selectedDifficulty, questionNumber]);\n  useEffect(() => getQuestionList(), [getQuestionList]);\n\n  const handleAnswerButtonClick = (isCorrect: boolean) => {\n    const nextQuestion = currentQuestion + 1;\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    if (nextQuestion < questionList.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const handleNewQuizButtonClick = () => {\n    setShowScore(false);\n    getQuestionList();\n    setCurrentQuestion(0);\n    setScore(0);\n  };\n\n  const finalChild = () => {\n    if (showScore) {\n      return <Score score={score} nrOfQuestions={questionList.length} handleButtonClick={handleNewQuizButtonClick} />;\n    } else if (loading) {\n      return <Loading />;\n    } else if (questionList.length === 0) {\n      return <NoData />;\n    } else {\n      return (\n        <Question\n          currentQuestion={currentQuestion}\n          nrOfQuestions={questionList.length}\n          questionText={questionList[currentQuestion].question}\n          answers={shuffle([\n            questionList[currentQuestion].correct_answer,\n            ...questionList[currentQuestion].incorrect_answers,\n          ])}\n          correctAnswer={questionList[currentQuestion].correct_answer}\n          handleAnswerButtonClick={handleAnswerButtonClick}\n        />\n      );\n    }\n  };\n\n  return <Container className={styles.quiz}>{finalChild()}</Container>;\n};\n\nexport default Quiz;\n","export const QUIZ_CATEGORY_API = \"https://opentdb.com/api_category.php\";\nexport const QUIZ_TOTAL_QUESTION_COUNT_API = \"https://opentdb.com/api_count_global.php\";\nexport const QUIZ_QUESTION_COUNT_BY_CATEGORY_API = \"https://opentdb.com/api_count.php?category=\";\nexport const QUIZ_API = \"https://opentdb.com/api.php\";\n","export const SET_CATEGORY_ID = \"SET_CATEGORY_ID\";\nexport const SET_DIFFICULTY = \"SET_DIFFICULTY\";\nexport const SET_QUESTION_NUMBER = \"SET_QUESTION_NUMBER\";\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useFormControlStyle = makeStyles({\n  formControl: {\n    width: \"100%\",\n  },\n  quizForm: {\n    flexDirection: \"column\",\n    gap: 25,\n  },\n});\n\nexport default useFormControlStyle;\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { QUIZ_CATEGORY_API } from \"../../quizApi\";\nimport { setCategoryID } from \"../../store/actionCreators\";\nimport { QuizFormState } from \"../../types/type\";\nimport useFormControlStyle from \"./FormControlStyle\";\n\ntype Category = {\n  id: number;\n  name: string;\n};\n\ntype CategoryResult = {\n  trivia_categories: Category[];\n};\n\nconst CategorySelector = () => {\n  const dispatch = useDispatch();\n  const style = useFormControlStyle();\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [categoryList, setCategoryList] = useState<Category[]>([]);\n\n  const selectedCategoryID = useSelector((state: QuizFormState) => state.categoryID);\n  const setSelectedCategoryID = useCallback((categoryID: number) => dispatch(setCategoryID(categoryID)), [dispatch]);\n\n  const AllCategory: Category = { id: 0, name: \"All\" };\n\n  const getCategories = useCallback(() => {\n    setLoading(true);\n\n    fetch(QUIZ_CATEGORY_API)\n      .then((res) => res.json())\n      .then((res: CategoryResult) => {\n        setCategoryList(res.trivia_categories);\n        setLoading(false);\n      });\n  }, []);\n  useEffect(() => getCategories(), [getCategories]);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedCategoryID(event.target.value as number);\n  };\n\n  return (\n    <FormControl variant=\"outlined\" color=\"primary\" className={style.formControl}>\n      <InputLabel id=\"category-selector-label\">Category</InputLabel>\n      <Select\n        labelId=\"category-selector-label\"\n        id=\"category-selector\"\n        label=\"Category\"\n        disabled={loading}\n        value={selectedCategoryID === undefined ? \"\" : selectedCategoryID}\n        onChange={handleChange}\n      >\n        {[AllCategory, ...categoryList].map((category) => {\n          return (\n            <MenuItem key={category.id} value={category.id}>\n              {category.name}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default CategorySelector;\n","import { Difficulty, DispatchType, QuizFormAction } from \"../types/type\";\nimport { SET_CATEGORY_ID, SET_DIFFICULTY, SET_QUESTION_NUMBER } from \"./actionTypes\";\n\nexport function setCategoryID(categoryID: number) {\n  const action: QuizFormAction = {\n    type: SET_CATEGORY_ID,\n    payload: categoryID,\n  };\n\n  return (dispatch: DispatchType) => dispatch(action);\n}\n\nexport function setDifficulty(difficulty: Difficulty) {\n  const action: QuizFormAction = {\n    type: SET_DIFFICULTY,\n    payload: difficulty,\n  };\n\n  return (dispatch: DispatchType) => dispatch(action);\n}\n\nexport function setQuestionNumber(questionNumber: number) {\n  const action: QuizFormAction = {\n    type: SET_QUESTION_NUMBER,\n    payload: questionNumber,\n  };\n\n  return (dispatch: DispatchType) => dispatch(action);\n}\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDifficulty } from \"../../store/actionCreators\";\nimport { Difficulty, QuizFormState } from \"../../types/type\";\nimport useFormControlStyle from \"./FormControlStyle\";\n\nconst DifficultySelector = () => {\n  const dispatch = useDispatch();\n  const style = useFormControlStyle();\n\n  const selectedDifficulty = useSelector((state: QuizFormState) => state.difficulty);\n  const setSelectedDifficulty = useCallback((difficulty: Difficulty) => dispatch(setDifficulty(difficulty)), [\n    dispatch,\n  ]);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedDifficulty(event.target.value as Difficulty);\n  };\n\n  return (\n    <FormControl variant=\"outlined\" color=\"primary\" className={style.formControl}>\n      <InputLabel id=\"difficulty-selector-label\">Difficulty</InputLabel>\n      <Select\n        labelId=\"difficulty-selector-label\"\n        id=\"difficulty-selector\"\n        label=\"difficulty\"\n        value={selectedDifficulty}\n        onChange={handleChange}\n      >\n        <MenuItem value=\"all\">All</MenuItem>\n        <MenuItem value=\"easy\">Easy</MenuItem>\n        <MenuItem value=\"medium\">Medium</MenuItem>\n        <MenuItem value=\"hard\">Hard</MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default DifficultySelector;\n","import { FormControl, InputLabel, Slider, Tooltip } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { QUIZ_QUESTION_COUNT_BY_CATEGORY_API, QUIZ_TOTAL_QUESTION_COUNT_API } from \"../../quizApi\";\nimport { setQuestionNumber } from \"../../store/actionCreators\";\nimport { QuestionCountByCategoryResponse, QuizFormState, ValueLabelProps } from \"../../types/type\";\n\nconst ValueLabelComponent = (props: ValueLabelProps) => {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n};\n\nconst QuestionNumberSelector = () => {\n  const dispatch = useDispatch();\n\n  const selectedCategoryID = useSelector((state: QuizFormState) => state.categoryID);\n  const selectedDifficulty = useSelector((state: QuizFormState) => state.difficulty);\n\n  const setNumberOfQuestions = useCallback((questionNumber: number) => dispatch(setQuestionNumber(questionNumber)), [\n    dispatch,\n  ]);\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [maxQuestionCount, setMaxQuestionCount] = useState<number>(50);\n\n  const getQuestionCount = useCallback(() => {\n    setLoading(true);\n\n    if (selectedCategoryID === 0) {\n      fetch(QUIZ_TOTAL_QUESTION_COUNT_API)\n        .then((res) => res.json())\n        .then((res) => {\n          const count = res.overall.total_num_of_verified_questions;\n          setMaxQuestionCount(Math.min(count, 50));\n          setLoading(false);\n        });\n    } else {\n      let count;\n      fetch(`${QUIZ_QUESTION_COUNT_BY_CATEGORY_API}${selectedCategoryID}`)\n        .then((res) => res.json())\n        .then((res: QuestionCountByCategoryResponse) => {\n          switch (selectedDifficulty) {\n            case \"easy\":\n              count = res.category_question_count.total_easy_question_count;\n              break;\n            case \"medium\":\n              count = res.category_question_count.total_medium_question_count;\n              break;\n            case \"hard\":\n              count = res.category_question_count.total_hard_question_count;\n              break;\n            default:\n              count = res.category_question_count.total_question_count;\n              break;\n          }\n          setMaxQuestionCount(Math.min(count, 50));\n          setLoading(false);\n        });\n    }\n  }, [selectedCategoryID, selectedDifficulty]);\n  useEffect(() => getQuestionCount(), [selectedCategoryID, selectedDifficulty, getQuestionCount]);\n\n  const handleChangeCommit = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    setNumberOfQuestions(value as number);\n  };\n\n  return (\n    <FormControl>\n      <InputLabel id=\"question-number-selector-label\">Number of questions</InputLabel>\n      <Slider\n        id=\"question-number-selector\"\n        aria-labelledby=\"question-number-selector-label\"\n        ValueLabelComponent={ValueLabelComponent}\n        defaultValue={5}\n        min={1}\n        max={maxQuestionCount}\n        onChangeCommitted={handleChangeCommit}\n        disabled={loading}\n      />\n    </FormControl>\n  );\n};\n\nexport default QuestionNumberSelector;\n","import React from \"react\";\nimport useQuizStyles from \"../quiz/QuizStyles\";\nimport { Button, Container } from \"@material-ui/core\";\nimport CategorySelector from \"./CategorySelectorComponent\";\nimport DifficultySelector from \"./DifficultySelectorComponent\";\nimport QuestionNumberSelector from \"./QuestionNumberSelectorComponent\";\nimport { useHistory } from \"react-router-dom\";\nimport useFormControlStyle from \"./FormControlStyle\";\n\nconst QuizForm = () => {\n  const history = useHistory();\n  const quizStyles = useQuizStyles();\n  const formStyles = useFormControlStyle();\n\n  const handleClick = () => {\n    history.push(\"/react-quiz-app/quiz\");\n  };\n\n  return (\n    <Container className={`${quizStyles.quiz} ${formStyles.quizForm}`}>\n      <CategorySelector />\n      <DifficultySelector />\n      <QuestionNumberSelector />\n      <Button variant=\"contained\" color=\"primary\" style={{ marginTop: 50 }} onClick={handleClick}>\n        Start quiz\n      </Button>\n    </Container>\n  );\n};\n\nexport default QuizForm;\n","import React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport Quiz from \"./components/quiz/QuizComponent\";\nimport QuizForm from \"./components/form/QuizFormComponent\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Container className=\"app\">\n      <Switch>\n        <Route exact path=\"/\" component={() => <Redirect to=\"/react-quiz-app\" />} />\n        <Route exact path=\"/quiz\" component={() => <Redirect to=\"/react-quiz-app/quiz\" />} />\n        <Route exact path=\"/react-quiz-app\" component={() => <QuizForm />} />\n        <Route exact path=\"/react-quiz-app/quiz\" component={() => <Quiz />} />\n      </Switch>\n    </Container>\n  );\n};\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst primary = \"#c1d354\";\nconst secondary = \"#34495e\";\nconst correct = \"#2f922f\";\nconst incorrect = \"#ff3333\";\nconst white = \"#ffffff\";\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      default: primary,\n    },\n    primary: {\n      main: primary,\n      contrastText: secondary,\n    },\n    secondary: {\n      main: secondary,\n      contrastText: white,\n    },\n    text: {\n      primary: secondary,\n    },\n    correct: {\n      main: correct,\n    },\n    incorrect: {\n      main: incorrect,\n    },\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        borderWidth: 5,\n      },\n    },\n    MuiFormLabel: {\n      root: {\n        color: white,\n      },\n    },\n    MuiOutlinedInput: {\n      input: {\n        color: white,\n      },\n      root: {\n        \"& $notchedOutline\": {\n          borderColor: primary,\n        },\n        \"&:hover:not($disabled):not($focused):not($error) $notchedOutline\": {\n          borderColor: primary,\n          // Reset on touch devices, it doesn't add specificity\n          \"@media (hover: none)\": {\n            borderColor: primary,\n          },\n        },\n        \"&$focused $notchedOutline\": {\n          borderColor: primary,\n          borderWidth: 1,\n        },\n      },\n    },\n    // Applied to the <ul> element\n    MuiMenu: {\n      list: {\n        backgroundColor: secondary,\n      },\n    },\n    // Applied to the <li> elements\n    MuiMenuItem: {\n      root: {\n        backgroundColor: secondary,\n      },\n    },\n    MuiSlider: {\n      root: {\n        \"&$disabled $thumb\": {\n          color: \"grey\",\n        },\n        \"&$disabled $track\": {\n          color: \"grey\",\n        },\n      },\n      thumb: {\n        color: primary,\n      },\n      track: {\n        color: primary,\n      },\n    },\n  },\n});\n\nexport default theme;\n","import { Difficulty, QuizFormAction, QuizFormState } from \"../types/type\";\nimport { SET_CATEGORY_ID, SET_DIFFICULTY, SET_QUESTION_NUMBER } from \"./actionTypes\";\n\nconst initialState: QuizFormState = {\n  categoryID: 0,\n  difficulty: \"all\",\n  questionNUmber: 5,\n};\n\nconst reducer = (state: QuizFormState = initialState, action: QuizFormAction): QuizFormState => {\n  switch (action.type) {\n    case SET_CATEGORY_ID:\n      return {\n        ...state,\n        categoryID: action.payload as number,\n      };\n    case SET_DIFFICULTY:\n      return {\n        ...state,\n        difficulty: action.payload as Difficulty,\n      };\n    case SET_QUESTION_NUMBER:\n      return {\n        ...state,\n        questionNUmber: action.payload as number,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"fontsource-roboto/index.css\";\nimport \"fontsource-roboto/300.css\";\nimport \"fontsource-roboto/500.css\";\nimport \"fontsource-roboto/700.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport { Provider } from \"react-redux\";\nimport { DispatchType, QuizFormAction, QuizFormState } from \"./types/type\";\nimport { createStore, Store, applyMiddleware } from \"redux\";\nimport reducer from \"./store/reducer\";\nimport thunk from \"redux-thunk\";\n\nconst store: Store<QuizFormState, QuizFormAction> & { dispatch: DispatchType } = createStore(\n  reducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}